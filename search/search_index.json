{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Simulation Documentation","text":"<p>Welcome to our comprehensive documentation for the Simulation Framework. This framework includes several simulation models that are designed to demonstrate and analyze various phenomena in business and economics. Here, you will find detailed information on the workings and usage of each simulation model.</p>"},{"location":"#simulation-models","title":"Simulation Models","text":""},{"location":"#product-popularity-simulation","title":"Product Popularity Simulation","text":"<p>The Product Popularity Simulation models the dynamics of product demand over time, considering factors like natural growth, marketing impact, and promotional campaigns.</p> <ul> <li>Learn more about the Product Popularity Simulation</li> </ul>"},{"location":"#stock-market-simulation","title":"Stock Market Simulation","text":"<p>The Stock Market Simulation provides a framework for modeling and predicting stock price movements based on various economic and psychological factors.</p> <ul> <li>Learn more about the Stock Market Simulation</li> </ul>"},{"location":"#resource-fluctuations-simulation","title":"Resource Fluctuations Simulation","text":"<p>The Resource Fluctuations Simulation models the price variability of resources over time, factoring in elements like market volatility, economic drift, and external disruptions.</p> <ul> <li>Learn more about the Resource Fluctuations Simulation</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with using these simulations, visit our Getting Started guide which will help you set up and run your first simulations.</p>"},{"location":"#contribute","title":"Contribute","text":"<p>Interested in contributing to the Simulation Framework? Check out our Contribution Guidelines for more information on how you can help improve these simulations.</p>"},{"location":"#contact","title":"Contact","text":"<p>If you have any questions or feedback, please don't hesitate to Contact Us.</p>"},{"location":"api/","title":"API Documentation","text":""},{"location":"api/#product-popularity-simulation-class","title":"Product Popularity Simulation Class","text":"<p>A simulation class to model the dynamics of product popularity over time, incorporating factors like natural growth, marketing impact, and promotional campaigns.</p> <p>Attributes:</p> Name Type Description <code>start_demand</code> <code>int</code> <p>Initial demand for the product.</p> <code>days</code> <code>int</code> <p>Duration of the simulation in days.</p> <code>growth_rate</code> <code>float</code> <p>Natural growth rate of product demand.</p> <code>marketing_impact</code> <code>float</code> <p>Impact of ongoing marketing efforts on demand.</p> <code>promotion_day</code> <code>Optional[int]</code> <p>Day on which a major marketing campaign starts (default is None).</p> <code>promotion_effectiveness</code> <code>float</code> <p>Effectiveness of the marketing campaign.</p> <code>random_seed</code> <code>Optional[int]</code> <p>The seed for the random number generator to ensure reproducibility (default is None).</p> <p>Methods:</p> Name Description <code>run_simulation</code> <p>Runs the simulation and returns a list of demand values over time.</p> Source code in <code>simulacra/product_popularity_simulation.py</code> <pre><code>class ProductPopularitySimulation:\n    \"\"\"\n    A simulation class to model the dynamics of product popularity over time,\n    incorporating factors like natural growth, marketing impact, and promotional campaigns.\n\n    Attributes:\n        start_demand (int): Initial demand for the product.\n        days (int): Duration of the simulation in days.\n        growth_rate (float): Natural growth rate of product demand.\n        marketing_impact (float): Impact of ongoing marketing efforts on demand.\n        promotion_day (Optional[int]): Day on which a major marketing campaign starts (default is None).\n        promotion_effectiveness (float): Effectiveness of the marketing campaign.\n        random_seed (Optional[int]): The seed for the random number generator to ensure reproducibility (default is None).\n\n    Methods:\n        run_simulation(): Runs the simulation and returns a list of demand values over time.\n    \"\"\"\n\n    def __init__(\n        self, start_demand: float, days: int, growth_rate: float, marketing_impact: float,\n        promotion_day: Optional[int] = None, promotion_effectiveness: float = 0,\n        random_seed: Optional[int] = None\n    ) -&gt; None:\n        \"\"\"\n        Initializes the ProductPopularitySimulation with all necessary parameters.\n\n        Parameters:\n            start_demand (int): The initial level of demand for the product.\n            days (int): The total number of days to simulate.\n            growth_rate (float): The natural daily growth rate of demand, as a decimal.\n            marketing_impact (float): Daily impact of marketing on demand, as a decimal.\n            promotion_day (Optional[int]): The specific day on which a promotional event occurs (defaults to None).\n            promotion_effectiveness (float): Multiplicative impact of the promotion on demand.\n            random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None).\n        \"\"\"\n        self.start_demand = start_demand\n        self.days = days\n        self.growth_rate = growth_rate\n        self.marketing_impact = marketing_impact\n        self.promotion_day = promotion_day\n        self.promotion_effectiveness = promotion_effectiveness\n        self.random_seed = random_seed\n\n    def run_simulation(self) -&gt; List[float]:\n        \"\"\"\n        Simulates the demand for a product over a specified number of days based on the initial settings.\n\n        Returns:\n            List[int]: A list containing the demand for the product for each day of the simulation.\n        \"\"\"\n        if self.random_seed is not None:\n            np.random.seed(self.random_seed)\n\n        demand = [self.start_demand]\n        for day in range(1, self.days):\n            previous_demand = demand[-1]\n            natural_growth = previous_demand * (1 + self.growth_rate)\n            marketing_influence = previous_demand * self.marketing_impact\n\n            new_demand = natural_growth + marketing_influence\n\n            if day == self.promotion_day:\n                new_demand = (natural_growth + marketing_influence) * (1 + self.promotion_effectiveness)\n\n            demand.append(new_demand)\n\n        return demand\n</code></pre>"},{"location":"api/#simulacra.ProductPopularitySimulation.__init__","title":"<code>__init__(start_demand, days, growth_rate, marketing_impact, promotion_day=None, promotion_effectiveness=0, random_seed=None)</code>","text":"<p>Initializes the ProductPopularitySimulation with all necessary parameters.</p> <p>Parameters:</p> Name Type Description Default <code>start_demand</code> <code>int</code> <p>The initial level of demand for the product.</p> required <code>days</code> <code>int</code> <p>The total number of days to simulate.</p> required <code>growth_rate</code> <code>float</code> <p>The natural daily growth rate of demand, as a decimal.</p> required <code>marketing_impact</code> <code>float</code> <p>Daily impact of marketing on demand, as a decimal.</p> required <code>promotion_day</code> <code>Optional[int]</code> <p>The specific day on which a promotional event occurs (defaults to None).</p> <code>None</code> <code>promotion_effectiveness</code> <code>float</code> <p>Multiplicative impact of the promotion on demand.</p> <code>0</code> <code>random_seed</code> <code>Optional[int]</code> <p>Seed for the random number generator to ensure reproducible results (defaults to None).</p> <code>None</code> Source code in <code>simulacra/product_popularity_simulation.py</code> <pre><code>def __init__(\n    self, start_demand: float, days: int, growth_rate: float, marketing_impact: float,\n    promotion_day: Optional[int] = None, promotion_effectiveness: float = 0,\n    random_seed: Optional[int] = None\n) -&gt; None:\n    \"\"\"\n    Initializes the ProductPopularitySimulation with all necessary parameters.\n\n    Parameters:\n        start_demand (int): The initial level of demand for the product.\n        days (int): The total number of days to simulate.\n        growth_rate (float): The natural daily growth rate of demand, as a decimal.\n        marketing_impact (float): Daily impact of marketing on demand, as a decimal.\n        promotion_day (Optional[int]): The specific day on which a promotional event occurs (defaults to None).\n        promotion_effectiveness (float): Multiplicative impact of the promotion on demand.\n        random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None).\n    \"\"\"\n    self.start_demand = start_demand\n    self.days = days\n    self.growth_rate = growth_rate\n    self.marketing_impact = marketing_impact\n    self.promotion_day = promotion_day\n    self.promotion_effectiveness = promotion_effectiveness\n    self.random_seed = random_seed\n</code></pre>"},{"location":"api/#simulacra.ProductPopularitySimulation.run_simulation","title":"<code>run_simulation()</code>","text":"<p>Simulates the demand for a product over a specified number of days based on the initial settings.</p> <p>Returns:</p> Type Description <code>List[float]</code> <p>List[int]: A list containing the demand for the product for each day of the simulation.</p> Source code in <code>simulacra/product_popularity_simulation.py</code> <pre><code>def run_simulation(self) -&gt; List[float]:\n    \"\"\"\n    Simulates the demand for a product over a specified number of days based on the initial settings.\n\n    Returns:\n        List[int]: A list containing the demand for the product for each day of the simulation.\n    \"\"\"\n    if self.random_seed is not None:\n        np.random.seed(self.random_seed)\n\n    demand = [self.start_demand]\n    for day in range(1, self.days):\n        previous_demand = demand[-1]\n        natural_growth = previous_demand * (1 + self.growth_rate)\n        marketing_influence = previous_demand * self.marketing_impact\n\n        new_demand = natural_growth + marketing_influence\n\n        if day == self.promotion_day:\n            new_demand = (natural_growth + marketing_influence) * (1 + self.promotion_effectiveness)\n\n        demand.append(new_demand)\n\n    return demand\n</code></pre>"},{"location":"api/#resource-fluctuation-simulation-class","title":"Resource Fluctuation Simulation Class","text":"<p>A simulation class to model the fluctuations of resource prices over time, considering factors like volatility, market trends (drift), and supply disruptions.</p> <p>Attributes:</p> Name Type Description <code>start_price</code> <code>float</code> <p>The initial price of the resource.</p> <code>days</code> <code>int</code> <p>The duration of the simulation in days.</p> <code>volatility</code> <code>float</code> <p>The volatility of price changes, representing day-to-day variability.</p> <code>drift</code> <code>float</code> <p>The average daily price change, indicating the trend over time.</p> <code>supply_disruption_day</code> <code>Optional[int]</code> <p>The specific day a supply disruption occurs (default is None).</p> <code>disruption_severity</code> <code>float</code> <p>The magnitude of the disruption's impact on price (default is 0).</p> <code>random_seed</code> <code>Optional[int]</code> <p>The seed for the random number generator to ensure reproducibility (default is None).</p> Source code in <code>simulacra/resource_fluctuations_simulation.py</code> <pre><code>class ResourceFluctuationsSimulation:\n    \"\"\"\n    A simulation class to model the fluctuations of resource prices over time,\n    considering factors like volatility, market trends (drift), and supply disruptions.\n\n    Attributes:\n        start_price (float): The initial price of the resource.\n        days (int): The duration of the simulation in days.\n        volatility (float): The volatility of price changes, representing day-to-day variability.\n        drift (float): The average daily price change, indicating the trend over time.\n        supply_disruption_day (Optional[int]): The specific day a supply disruption occurs (default is None).\n        disruption_severity (float): The magnitude of the disruption's impact on price (default is 0).\n        random_seed (Optional[int]): The seed for the random number generator to ensure reproducibility (default is None).\n    \"\"\"\n    def __init__(self, start_price: float, days: int, volatility: float, drift: float,\n                 supply_disruption_day: Optional[int] = None, disruption_severity: float = 0,\n                 random_seed: Optional[int] = None) -&gt; None:\n        \"\"\"\n        Initializes the ResourceSimulation with all necessary parameters.\n\n        Parameters:\n            start_price (float): The initial price of the resource.\n            days (int): The total number of days to simulate.\n            volatility (float): The volatility of the resource price, representing the randomness of day-to-day price changes.\n            drift (float): The expected daily percentage change in price, which can be positive or negative.\n            supply_disruption_day (Optional[int]): Day on which a supply disruption occurs (defaults to None).\n            disruption_severity (float): The severity of the supply disruption, affecting prices multiplicatively.\n            random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None).\n        \"\"\"\n        self.start_price = start_price\n        self.days = days\n        self.volatility = volatility\n        self.drift = drift\n        self.supply_disruption_day = supply_disruption_day\n        self.disruption_severity = disruption_severity\n        self.random_seed = random_seed\n\n    def run_simulation(self) -&gt; List[float]:\n        \"\"\"\n        Simulates the price of the resource over a specified number of days based on the initial settings.\n\n        Returns:\n            List[float]: A list containing the price of the resource for each day of the simulation.\n        \"\"\"\n        if self.random_seed is not None:\n            np.random.seed(self.random_seed)\n\n        prices = [self.start_price]\n        for day in range(1, self.days):\n            previous_price = prices[-1]\n            random_change = np.random.normal(self.drift, self.volatility)\n            new_price = previous_price * (1 + random_change)\n\n            if day == self.supply_disruption_day:\n                new_price = previous_price * (1 + self.disruption_severity)\n\n            prices.append(new_price)\n\n        return prices\n</code></pre>"},{"location":"api/#simulacra.ResourceFluctuationsSimulation.__init__","title":"<code>__init__(start_price, days, volatility, drift, supply_disruption_day=None, disruption_severity=0, random_seed=None)</code>","text":"<p>Initializes the ResourceSimulation with all necessary parameters.</p> <p>Parameters:</p> Name Type Description Default <code>start_price</code> <code>float</code> <p>The initial price of the resource.</p> required <code>days</code> <code>int</code> <p>The total number of days to simulate.</p> required <code>volatility</code> <code>float</code> <p>The volatility of the resource price, representing the randomness of day-to-day price changes.</p> required <code>drift</code> <code>float</code> <p>The expected daily percentage change in price, which can be positive or negative.</p> required <code>supply_disruption_day</code> <code>Optional[int]</code> <p>Day on which a supply disruption occurs (defaults to None).</p> <code>None</code> <code>disruption_severity</code> <code>float</code> <p>The severity of the supply disruption, affecting prices multiplicatively.</p> <code>0</code> <code>random_seed</code> <code>Optional[int]</code> <p>Seed for the random number generator to ensure reproducible results (defaults to None).</p> <code>None</code> Source code in <code>simulacra/resource_fluctuations_simulation.py</code> <pre><code>def __init__(self, start_price: float, days: int, volatility: float, drift: float,\n             supply_disruption_day: Optional[int] = None, disruption_severity: float = 0,\n             random_seed: Optional[int] = None) -&gt; None:\n    \"\"\"\n    Initializes the ResourceSimulation with all necessary parameters.\n\n    Parameters:\n        start_price (float): The initial price of the resource.\n        days (int): The total number of days to simulate.\n        volatility (float): The volatility of the resource price, representing the randomness of day-to-day price changes.\n        drift (float): The expected daily percentage change in price, which can be positive or negative.\n        supply_disruption_day (Optional[int]): Day on which a supply disruption occurs (defaults to None).\n        disruption_severity (float): The severity of the supply disruption, affecting prices multiplicatively.\n        random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None).\n    \"\"\"\n    self.start_price = start_price\n    self.days = days\n    self.volatility = volatility\n    self.drift = drift\n    self.supply_disruption_day = supply_disruption_day\n    self.disruption_severity = disruption_severity\n    self.random_seed = random_seed\n</code></pre>"},{"location":"api/#simulacra.ResourceFluctuationsSimulation.run_simulation","title":"<code>run_simulation()</code>","text":"<p>Simulates the price of the resource over a specified number of days based on the initial settings.</p> <p>Returns:</p> Type Description <code>List[float]</code> <p>List[float]: A list containing the price of the resource for each day of the simulation.</p> Source code in <code>simulacra/resource_fluctuations_simulation.py</code> <pre><code>def run_simulation(self) -&gt; List[float]:\n    \"\"\"\n    Simulates the price of the resource over a specified number of days based on the initial settings.\n\n    Returns:\n        List[float]: A list containing the price of the resource for each day of the simulation.\n    \"\"\"\n    if self.random_seed is not None:\n        np.random.seed(self.random_seed)\n\n    prices = [self.start_price]\n    for day in range(1, self.days):\n        previous_price = prices[-1]\n        random_change = np.random.normal(self.drift, self.volatility)\n        new_price = previous_price * (1 + random_change)\n\n        if day == self.supply_disruption_day:\n            new_price = previous_price * (1 + self.disruption_severity)\n\n        prices.append(new_price)\n\n    return prices\n</code></pre>"},{"location":"api/#stock-market-simulation-class","title":"Stock Market Simulation Class","text":"<p>A simulation class to model the fluctuations of stock prices over time, accounting for volatility, general market trends (drift), and specific market events.</p> <p>Attributes:</p> Name Type Description <code>start_price</code> <code>float</code> <p>The initial price of the stock.</p> <code>days</code> <code>int</code> <p>The duration of the simulation in days.</p> <code>volatility</code> <code>float</code> <p>The volatility of stock price changes, representing day-to-day variability.</p> <code>drift</code> <code>float</code> <p>The average daily price change, indicating the trend over time.</p> <code>event_day</code> <code>Optional[int]</code> <p>The specific day a major market event occurs (default is None).</p> <code>event_impact</code> <code>float</code> <p>The magnitude of the event's impact on stock prices (default is 0).</p> <code>random_seed</code> <code>Optional[int]</code> <p>The seed for the random number generator to ensure reproducibility (default is None).</p> <p>Methods:</p> Name Description <code>run_simulation</code> <p>Runs the simulation and returns a list of stock prices over the simulation period.</p> Source code in <code>simulacra/stock_market_simulation.py</code> <pre><code>class StockMarketSimulation:\n    \"\"\"\n    A simulation class to model the fluctuations of stock prices over time, accounting for volatility,\n    general market trends (drift), and specific market events.\n\n    Attributes:\n        start_price (float): The initial price of the stock.\n        days (int): The duration of the simulation in days.\n        volatility (float): The volatility of stock price changes, representing day-to-day variability.\n        drift (float): The average daily price change, indicating the trend over time.\n        event_day (Optional[int]): The specific day a major market event occurs (default is None).\n        event_impact (float): The magnitude of the event's impact on stock prices (default is 0).\n        random_seed (Optional[int]): The seed for the random number generator to ensure reproducibility (default is None).\n\n    Methods:\n        run_simulation(): Runs the simulation and returns a list of stock prices over the simulation period.\n    \"\"\"\n\n    def __init__(\n        self, start_price: float, days: int, volatility: float, drift: float,\n        event_day: Optional[int] = None, event_impact: float = 0,\n        random_seed: Optional[int] = None\n    ) -&gt; None:\n        \"\"\"\n        Initializes the StockMarketSimulation with all necessary parameters.\n\n        Parameters:\n            start_price (float): The initial stock price.\n            days (int): The total number of days to simulate.\n            volatility (float): The volatility of the stock price, representing the randomness of day-to-day price changes.\n            drift (float): The expected daily percentage change in price, which can be positive or negative.\n            event_day (Optional[int]): Day on which a major market event occurs (defaults to None).\n            event_impact (float): The severity of the market event, affecting prices multiplicatively.\n            random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None).\n        \"\"\"\n        self.start_price = start_price\n        self.days = days\n        self.volatility = volatility\n        self.drift = drift\n        self.event_day = event_day\n        self.event_impact = event_impact\n        self.random_seed = random_seed\n\n    def run_simulation(self) -&gt; List[float]:\n        \"\"\"\n        Simulates the stock price over a specified number of days based on the initial settings.\n\n        Returns:\n            List[float]: A list containing the stock prices for each day of the simulation.\n        \"\"\"\n        if self.random_seed is not None:\n            np.random.seed(self.random_seed)\n\n        prices = [self.start_price]\n        for day in range(1, self.days):\n            previous_price = prices[-1]\n            random_change = np.random.normal(self.drift, self.volatility)\n            new_price = previous_price * (1 + random_change)\n\n            if day == self.event_day:\n                new_price = previous_price * (1 + self.event_impact)\n\n            prices.append(new_price)\n\n        return prices\n</code></pre>"},{"location":"api/#simulacra.StockMarketSimulation.__init__","title":"<code>__init__(start_price, days, volatility, drift, event_day=None, event_impact=0, random_seed=None)</code>","text":"<p>Initializes the StockMarketSimulation with all necessary parameters.</p> <p>Parameters:</p> Name Type Description Default <code>start_price</code> <code>float</code> <p>The initial stock price.</p> required <code>days</code> <code>int</code> <p>The total number of days to simulate.</p> required <code>volatility</code> <code>float</code> <p>The volatility of the stock price, representing the randomness of day-to-day price changes.</p> required <code>drift</code> <code>float</code> <p>The expected daily percentage change in price, which can be positive or negative.</p> required <code>event_day</code> <code>Optional[int]</code> <p>Day on which a major market event occurs (defaults to None).</p> <code>None</code> <code>event_impact</code> <code>float</code> <p>The severity of the market event, affecting prices multiplicatively.</p> <code>0</code> <code>random_seed</code> <code>Optional[int]</code> <p>Seed for the random number generator to ensure reproducible results (defaults to None).</p> <code>None</code> Source code in <code>simulacra/stock_market_simulation.py</code> <pre><code>def __init__(\n    self, start_price: float, days: int, volatility: float, drift: float,\n    event_day: Optional[int] = None, event_impact: float = 0,\n    random_seed: Optional[int] = None\n) -&gt; None:\n    \"\"\"\n    Initializes the StockMarketSimulation with all necessary parameters.\n\n    Parameters:\n        start_price (float): The initial stock price.\n        days (int): The total number of days to simulate.\n        volatility (float): The volatility of the stock price, representing the randomness of day-to-day price changes.\n        drift (float): The expected daily percentage change in price, which can be positive or negative.\n        event_day (Optional[int]): Day on which a major market event occurs (defaults to None).\n        event_impact (float): The severity of the market event, affecting prices multiplicatively.\n        random_seed (Optional[int]): Seed for the random number generator to ensure reproducible results (defaults to None).\n    \"\"\"\n    self.start_price = start_price\n    self.days = days\n    self.volatility = volatility\n    self.drift = drift\n    self.event_day = event_day\n    self.event_impact = event_impact\n    self.random_seed = random_seed\n</code></pre>"},{"location":"api/#simulacra.StockMarketSimulation.run_simulation","title":"<code>run_simulation()</code>","text":"<p>Simulates the stock price over a specified number of days based on the initial settings.</p> <p>Returns:</p> Type Description <code>List[float]</code> <p>List[float]: A list containing the stock prices for each day of the simulation.</p> Source code in <code>simulacra/stock_market_simulation.py</code> <pre><code>def run_simulation(self) -&gt; List[float]:\n    \"\"\"\n    Simulates the stock price over a specified number of days based on the initial settings.\n\n    Returns:\n        List[float]: A list containing the stock prices for each day of the simulation.\n    \"\"\"\n    if self.random_seed is not None:\n        np.random.seed(self.random_seed)\n\n    prices = [self.start_price]\n    for day in range(1, self.days):\n        previous_price = prices[-1]\n        random_change = np.random.normal(self.drift, self.volatility)\n        new_price = previous_price * (1 + random_change)\n\n        if day == self.event_day:\n            new_price = previous_price * (1 + self.event_impact)\n\n        prices.append(new_price)\n\n    return prices\n</code></pre>"},{"location":"contact/","title":"Contact Us","text":"<p>If you have any questions, need support, or wish to provide feedback about Simulacra, please feel free to reach out. We value your input and are here to help.</p>"},{"location":"contact/#general-inquiries","title":"General Inquiries","text":"<p>For general questions about Simulacra or how to use it, please email us at:</p> <ul> <li>Email: support@simulacra.com</li> </ul> <p>Please allow 24-48 hours for a response, as we strive to provide detailed and helpful answers to all inquiries.</p>"},{"location":"contact/#technical-support","title":"Technical Support","text":"<p>If you're experiencing technical issues or need help troubleshooting, you can:</p> <ul> <li>Submit an Issue: Visit our GitHub Issues Page to report a bug or a problem. Please check to see if your issue has already been reported or addressed before opening a new issue.</li> </ul>"},{"location":"contact/#feature-requests","title":"Feature Requests","text":"<p>We are always looking to improve Simulacra and welcome your ideas and proposals for new features:</p> <ul> <li>Feature Suggestions: Please submit your feature requests through our GitHub Issues Page. Tag your post with the 'feature request' label so we can easily identify it.</li> </ul>"},{"location":"contact/#follow-us","title":"Follow Us","text":"<p>Stay updated on the latest developments and updates of Simulacra by following us on social media:</p> <ul> <li>Twitter: @SimulacraTech</li> <li>LinkedIn: Simulacra Technologies</li> </ul>"},{"location":"contact/#mailing-list","title":"Mailing List","text":"<p>Join our mailing list to receive updates, news, and special offers related to Simulacra:</p> <ul> <li>Sign Up: Join Mailing List [Link to mailing list subscription form]</li> </ul> <p>Thank you for your interest in Simulacra. We look forward to hearing from you and assisting you with your simulation needs!</p>"},{"location":"contribute/","title":"Contribute to Our Project","text":"<p>We welcome contributions from the community. Before contributing, please read our contribution guidelines to understand how you can help improve this project.</p> <p>Read the Contribution Guidelines</p>"},{"location":"getting_started/","title":"Getting Started with Simulacra","text":"<p>Welcome to the getting started guide for Simulacra, a package designed for simulating various phenomena such as product popularity, stock market behaviors, and resource fluctuations. This guide will walk you through the steps of installing the package and running your first simulation.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>To use Simulacra, you need to have Python installed on your machine. If you do not have Python installed, you can download and install it from python.org.</p>"},{"location":"getting_started/#install-from-github","title":"Install from GitHub","text":"<p>Simulacra can be installed directly from its GitHub repository using pip. Open your command line interface (CLI) and run the following command:</p> <pre><code>pip install git+https://github.com/teaching-repositories/simulacra.git -q\n</code></pre> <p>This command will fetch the latest version of Simulacra from the GitHub repository and install it along with its dependencies.</p>"},{"location":"getting_started/#verify-installation","title":"Verify Installation","text":"<p>To ensure that Simulacra was installed correctly, try running the following command:</p> <pre><code>python -c \"import simulacra; print(simulacra.__version__)\"\n</code></pre> <p>This command should print the version number of the Simulacra package if it has been installed successfully.</p>"},{"location":"getting_started/#running-your-first-simulation","title":"Running Your First Simulation","text":"<p>Once Simulacra is installed, you can start simulating right away. Here\u2019s a quick example on how to simulate product popularity:</p> <pre><code>from simulacra.product_popularity import ProductPopularitySimulation\n\n# Create a simulation instance\nsim = ProductPopularitySimulation(\n    start_demand=100,\n    days=365,\n    growth_rate=0.01,\n    marketing_impact=0.05,\n    promotion_day=100,\n    promotion_effectiveness=0.3,\n    random_seed=42\n)\n\n# Run the simulation\nresults = sim.run_simulation()\n\n# Print the results\nprint(results)\n</code></pre> <p>This example sets up a year-long simulation of product demand, including a promotion day with specific effectiveness.</p>"},{"location":"getting_started/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the detailed API documentation for more features and other simulation types.</li> <li>Check out examples and tutorials in the documentation to get more familiar with what you can achieve with Simulacra.</li> </ul>"},{"location":"getting_started/#getting-help","title":"Getting Help","text":"<p>If you encounter any issues or have questions, please refer to the Contact page for information on how to get in touch.</p> <p>Thank you for using Simulacra, and happy simulating!</p>"},{"location":"product_popularity/","title":"Product Popularity Simulation","text":""},{"location":"product_popularity/#purpose","title":"Purpose","text":"<p>This simulation models the dynamics of product popularity, allowing students to explore factors affecting market demand and the effectiveness of marketing strategies.</p>"},{"location":"product_popularity/#parameters","title":"Parameters","text":"<ul> <li><code>start_demand</code>: The initial demand for the product.</li> <li><code>days</code>: The duration of the simulation.</li> <li><code>growth_rate</code>: The rate at which product demand grows or declines naturally over time.</li> <li><code>marketing_impact</code>: The impact of marketing efforts on demand, represented as a percentage increase.</li> <li><code>promotion_day</code>: Specifies the day on which a major marketing campaign starts (optional).</li> <li><code>promotion_effectiveness</code>: The effectiveness of the promotional campaign, impacting demand growth positively.</li> </ul>"},{"location":"product_popularity/#example-code","title":"Example Code","text":"<pre><code>from simulacra import ProductPopularitySimulation\nimport matplotlib.pyplot as plt\n\n# Setting up a scenario with moderate natural growth and a significant marketing campaign.\nsim = ProductPopularitySimulation(start_demand=500, days=180, growth_rate=0.02, \n                                  marketing_impact=0.1, promotion_day=30, promotion_effectiveness=0.5)\n\ndemand = sim.run_simulation()\n\n# Visualizing product popularity\nplt.figure(figsize=(10, 6))\nplt.plot(demand, label='Product Demand')\nplt.axvline(x=sim.promotion_day, color='blue', linestyle='--', label='Marketing Campaign Start')\nplt.xlabel('Days')\nplt.ylabel('Demand Units')\nplt.title('Product Popularity Simulation')\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"product_popularity/#conducting-visual-analysis-using-the-simulation","title":"Conducting Visual Analysis Using the Simulation","text":"<p>Experiment! Use the simulation to explore and test various scenarios. Adjust parameters, try different strategies, and analyse the outcomes to gain deeper insights into resource management under fluctuating conditions.</p> <ul> <li> <p>Baseline Scenario Without Marketing Efforts: Begin by running simulations without any marketing efforts to understand the natural demand growth. This baseline will help you compare the effectiveness of different marketing strategies.</p> </li> <li> <p>Labeling and Annotations: Make sure your plots are well-labeled with days on the x-axis and demand units on the y-axis. Use annotations or markers to highlight when significant marketing campaigns start and their duration if applicable.</p> </li> <li> <p>Interactive Exploration: If possible, use interactive tools to adjust the parameters like growth rate, marketing impact, and timing of campaigns dynamically. This can help visualize the immediate effects of these changes on the demand curve.</p> </li> <li> <p>Comparative Analysis: Run multiple scenarios side-by-side to directly compare different growth rates, marketing impacts, or strategies. This comparison can make it easier to visualize which scenarios are most effective. Consider calculating and comparing statistics such as the average price before and after a disruption event to quantify its impact.</p> </li> </ul>"},{"location":"product_popularity/#task-specific-guidance","title":"Task-Specific Guidance","text":""},{"location":"product_popularity/#examine-how-changes-in-growth-rate-and-marketing-impact-affect-demand","title":"Examine How Changes in Growth Rate and Marketing Impact Affect Demand","text":"<p>Start by considering how natural growth influences demand over time. Introduce varying levels of marketing impact and observe how each setting alters the demand curve. Questions to Consider:</p> <ul> <li> <p>How does increasing the growth rate affect the overall demand by the end of the simulation?</p> </li> <li> <p>What happens when you combine high growth rates with strong marketing impacts?</p> </li> </ul>"},{"location":"product_popularity/#simulate-a-major-marketing-campaign-and-analyze-its-effect-on-demand-growth","title":"Simulate a Major Marketing Campaign and Analyze Its Effect on Demand Growth","text":"<p>Set up a scenario where a marketing campaign kicks in at a specific day. Vary the effectiveness of these campaigns to see different outcomes. Questions to Consider:</p> <ul> <li> <p>How does the timing of a marketing campaign influence its effectiveness?</p> </li> <li> <p>Compare the demand before and after the promotion day. What insights can you gain about the campaign\u2019s impact?</p> </li> </ul>"},{"location":"product_popularity/#optional-explore-different-marketing-strategies-and-their-cost-effectiveness","title":"(Optional) Explore Different Marketing Strategies and Their Cost-Effectiveness**","text":"<p>Implement various hypothetical marketing strategies with assumed costs and effectiveness. Calculate the return on investment (ROI) for each strategy based on the increase in demand they generate versus their costs. Questions to Consider:</p> <ul> <li> <p>Which marketing strategy offers the best ROI?</p> </li> <li> <p>How does the cost of a strategy relate to its effectiveness in boosting demand?</p> </li> </ul>"},{"location":"product_popularity/#model-formulation","title":"Model Formulation","text":"<p>The formula used in the <code>ProductPopularitySimulation</code> class for simulating product demand appears to incorporate several key factors: natural growth, marketing impact, and promotional campaigns. Here's a breakdown of how the formula works for each day of the simulation:</p> <ol> <li> <p>Natural Growth: The natural growth of the product's demand is modeled as a simple exponential growth, which is a common model in population dynamics and economics. Each day, the demand increases by a percentage defined by the <code>growth_rate</code> attribute. The formula for this part is:    [    \\text{Natural Growth} = \\text{Previous Demand} \\times (1 + \\text{Growth Rate})    ]</p> </li> <li> <p>Marketing Impact: On top of the natural growth, the formula also includes a daily impact from ongoing marketing efforts. This impact is additive and is calculated as a percentage of the previous day's demand, determined by the <code>marketing_impact</code> attribute:    [    \\text{Marketing Influence} = \\text{Previous Demand} \\times \\text{Marketing Impact}    ]</p> </li> <li> <p>Promotional Campaign: If a promotional campaign occurs on a specific day (defined by <code>promotion_day</code>), the demand for that day is further increased by a factor of <code>promotion_effectiveness</code>. This is modeled as a multiplicative boost to the demand calculated from natural growth and marketing influence:    [    \\text{New Demand} = (\\text{Natural Growth} + \\text{Marketing Influence}) \\times (1 + \\text{Promotion Effectiveness})    ]</p> </li> </ol> <p>The overall formula for days without a promotional campaign is: [ \\text{New Demand} = \\text{Natural Growth} + \\text{Marketing Influence} ]</p> <p>For the day with the promotional campaign, the formula changes as mentioned above.</p>"},{"location":"product_popularity/#relation-to-classical-models","title":"Relation to Classical Models","text":"<p>The model presented in the <code>ProductPopularitySimulation</code> class is not based directly on any classical single formula but instead combines concepts from various fields like marketing theory, economics, and systems dynamics: - The exponential growth model for natural increase is classical in many biological and economic models. - The impact of marketing as an additive factor is a straightforward approach often used in preliminary marketing models. - The multiplicative effect of a special promotion is also commonly used in models assessing the impact of irregular or one-time events on ongoing processes.</p> <p>The combination of these elements into a single model for simulating product demand helps in understanding how different factors interact over time to influence the market dynamics of a product. It's a practical approach that allows for adjustments and analysis of individual components like marketing strategies and promotional campaigns. This type of model can be very useful in academic settings or business analytics to forecast product demand under varying scenarios.</p>"},{"location":"resource_fluctuations/","title":"Resource Fluctuation Simulation","text":""},{"location":"resource_fluctuations/#purpose","title":"Purpose","text":"<p>This simulation models the price fluctuations of a critical resource for a business. It is applicable to commodities, raw materials, or any essential business input, helping students understand market dynamics and pricing strategies.</p>"},{"location":"resource_fluctuations/#parameters","title":"Parameters","text":"<ul> <li><code>start_price</code>: The initial price of the resource.</li> <li><code>days</code>: The duration of the simulation.</li> <li><code>volatility</code>: Controls the severity of day-to-day price fluctuations.</li> <li><code>drift</code>: Indicates the general upward or downward trend in price over time.</li> <li><code>supply_disruption_day</code>: Specifies the day on which a supply disruption event occurs (optional).</li> <li><code>disruption_severity</code>: The magnitude of the supply disruption's impact on the price, positive indicating a shortage and negative indicating a surplus.</li> </ul> <p>Example Code</p> <pre><code>from simulacra import ResourceFluctuationsSimulation\nimport matplotlib.pyplot as plt\n\n# Setting up a moderate volatility and upward drift scenario with a supply disruption.\nsim = ResourceFluctuationsSimulation(start_price=100, days=250, volatility=0.015, \n                         drift=0.0003, supply_disruption_day=100, disruption_severity=0.3) \n\nprices = sim.run_simulation()\n\n# Visualising the price simulation\nplt.figure(figsise=(10, 6))\nplt.plot(prices, label='Resource Price')\nplt.axvline(x=sim.supply_disruption_day, color='r', linestyle='--', label='Supply Disruption')\nplt.xlabel('Days')\nplt.ylabel('Price')\nplt.title('Resource Price Simulation')\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"resource_fluctuations/#conducting-visual-analysis-using-the-simulation","title":"Conducting Visual Analysis Using the Simulation:","text":"<p>Experiment! Use the simulation to explore and test various scenarios. Adjust parameters, try different strategies, and analyse the outcomes to gain deeper insights into resource management under fluctuating conditions.</p> <ul> <li> <p>Baseline Scenario Without Disruptions: Begin by simulating the price path without any disruptions to establish a baseline for comparison with more complex scenarios.</p> </li> <li> <p>Labeling and Annotations: Ensure that your plots clearly show the days on the x-axis and price on the y-axis. Use lines or markers to indicate the day of a supply disruption or the implementation of a hedging strategy.</p> </li> <li> <p>Interactive Exploration: If tools are available, adjust parameters such as volatility and drift dynamically to observe how these changes affect the price simulation. This can help in understanding the immediate effects of each parameter.</p> </li> <li> <p>Comparative Analysis: Conduct side-by-side comparisons of scenarios with different levels of volatility or different strategies to visually assess their impact. This can make it easier to understand which conditions or strategies lead to the most favorable outcomes.  Consider calculating and comparing statistics such as the average price before and after a disruption event to quantify its impact.</p> </li> </ul>"},{"location":"resource_fluctuations/#task-specific-guidance","title":"Task Specific Guidance","text":""},{"location":"resource_fluctuations/#assess-the-impact-of-volatility-on-price-stability","title":"Assess the Impact of Volatility on Price Stability:","text":"<p>Start by exploring how different levels of volatility affect day-to-day price fluctuations. This will help you understand the sensitivity of resource prices to changes in market conditions. Questions to Consider:</p> <ul> <li>What trends do you notice as volatility increases? How does it affect the predictability of price movements?</li> <li>How do different volatility levels impact the overall risk profile of investing in this resource?</li> </ul>"},{"location":"resource_fluctuations/#model-a-supply-disruption-event-and-analyse-its-impact","title":"Model a Supply Disruption Event and Analyse Its Impact","text":"<p>Set up scenarios where a supply disruption occurs at a predetermined day. Change the severity of these disruptions to see how they influence resource prices. Questions to Consider:</p> <ul> <li>How does the timing of a supply disruption affect its impact on resource prices?</li> <li>Compare the prices before and after the disruption. What can you infer about the resilience of the market to sudden changes?</li> </ul>"},{"location":"resource_fluctuations/#optional-explore-hedging-strategies","title":"(Optional) Explore Hedging Strategies","text":"<p>Implement simple hedging strategies to see how they could mitigate the risks associated with price volatility and supply disruptions. Consider strategies like futures contracts or options.Questions to Consider:</p> <ul> <li>Which hedging strategy appears most effective in stabilising price fluctuations?</li> <li>How do the costs of these strategies compare to their benefits in terms of reduced price volatility?</li> </ul>"},{"location":"resource_fluctuations/#model-formulation","title":"Model Formulation","text":"<p>The formula used in the <code>ResourceFluctuationsSimulation</code> class is designed to simulate the fluctuations in resource prices, incorporating daily volatility, a trend or drift over time, and the effects of supply disruptions. Here's a breakdown of how the formula works for each day of the simulation:</p> <ol> <li> <p>Volatility and Drift: Each day, the price of the resource changes based on a combination of volatility and drift. The volatility represents the day-to-day variability in price changes, while the drift represents a consistent trend in price changes over time. This is modeled using a normal distribution where the mean of the distribution is given by the <code>drift</code> and the standard deviation by the <code>volatility</code>. This is expressed as:    [    \\text{Random Change} = \\text{Normal}(\\text{Drift}, \\text{Volatility})    ]    Then, the new price is calculated as:    [    \\text{New Price} = \\text{Previous Price} \\times (1 + \\text{Random Change})    ]</p> </li> <li> <p>Supply Disruption: If there's a day specified for a supply disruption (given by <code>supply_disruption_day</code>), the formula adjusts the price of the resource significantly based on the <code>disruption_severity</code>. The severity is modeled as a multiplicative factor to the price of the resource:    [    \\text{New Price} = \\text{Previous Price} \\times (1 + \\text{Disruption Severity})    ]</p> </li> </ol>"},{"location":"resource_fluctuations/#relation-to-classical-models","title":"Relation to Classical Models","text":"<p>The simulation model appears to draw from the classical geometric Brownian motion (GBM) model, which is commonly used in financial mathematics to model stock prices and other financial assets. In GBM, the logarithm of the stock prices follows a Brownian motion (also known as a Wiener process) with drift and volatility, similar to the structure used in this resource simulation class:</p> <ul> <li> <p>Geometric Brownian Motion: The use of <code>previous_price * (1 + random_change)</code> closely resembles the discrete approximation of GBM, where price changes are log-normally distributed, allowing the price to stay positive and fluctuate in a realistic manner.</p> </li> <li> <p>Supply Disruption as a Jump Process: The inclusion of supply disruption as a multiplicative effect on the price for a specific day can be seen as a form of a jump process, where the price can have sudden, significant changes due to external events. This is similar to models used in energy markets and commodities trading, where sudden events can cause significant price changes.</p> </li> </ul> <p>Overall, while the exact parameters and implementation details might differ based on the simulation's objectives and the specific market being modeled, the underlying principles of the formula are well-established in the field of quantitative finance and economic modeling.</p>"},{"location":"stock_market/","title":"Stock Market Simulation","text":""},{"location":"stock_market/#purpose","title":"Purpose","text":"<p>This simulation models the fluctuations of stock prices, enabling students to explore financial market dynamics and develop basic trading strategies. It serves as a practical tool for understanding the principles of market speculation and risk management.</p>"},{"location":"stock_market/#parameters","title":"Parameters","text":"<ul> <li><code>start_price</code>: The initial price of the stock.</li> <li><code>days</code>: The duration of the simulation.</li> <li><code>volatility</code>: The measure of price fluctuations, indicating how much the price can vary day-to-day.</li> <li><code>drift</code>: Represents the overall trend in stock prices, whether upward or downward.</li> <li><code>event_day</code>: Specifies the day on which a major market event occurs (optional).</li> <li><code>event_impact</code>: The magnitude of the event\u2019s impact on stock prices, positive for beneficial events and negative for detrimental ones.</li> </ul> <p>Example Code</p> <pre><code>from simulacra import StockMarketSimulation\nimport matplotlib.pyplot as plt\n\n# Example scenario: High volatility with a downward price trend and a significant market event.\nsim = StockMarketSimulation(start_price=100, days=365, volatility=0.03, \n                            drift=-0.001, event_day=100, event_impact=-0.2)\n\nprices = sim.run_simulation()\n\n# Visualising the stock market fluctuations\nplt.figure(figsise=(10, 6))\nplt.plot(prices, label='Stock Price')\nplt.axvline(x=sim.event_day, color='red', linestyle='--', label='Major Market Event')\nplt.xlabel('Days')\nplt.ylabel('Price ($)')\nplt.title('Stock Market Simulation')\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"stock_market/#conducting-visual-analysis-using-the-simulation","title":"Conducting Visual Analysis Using the Simulation:","text":"<p>Experiment! Use the simulation to explore and test various scenarios. Adjust parameters, try different strategies, and analyse the outcomes to gain deeper insights into resource management under fluctuating conditions.</p> <ul> <li> <p>Baseline Scenario Without Disruptions: Begin by simulating the price path without any disruptions to establish a baseline for comparison with more complex scenarios.</p> </li> <li> <p>Labeling and Annotations: Ensure that your plots clearly show the days on the x-axis and price on the y-axis. Use lines or markers to indicate the day of the event or the implementation of a trading strategy.</p> </li> <li> <p>Interactive Exploration: If tools are available, adjust parameters such as volatility and drift dynamically to observe how these changes affect the price simulation. This can help in understanding the immediate effects of each parameter.</p> </li> <li> <p>Comparative Analysis: Conduct side-by-side comparisons of scenarios with different levels of volatility or different strategies to visually assess their impact. This can make it easier to understand which conditions or strategies lead to the most favorable outcomes.  Consider calculating and comparing statistics such as the average price before and after a disruption event to quantify its impact.</p> </li> </ul>"},{"location":"stock_market/#task-specific-guidance","title":"Task-Specific Guidance","text":""},{"location":"stock_market/#investigate-how-volatility-affects-stock-price-stability","title":"Investigate How Volatility Affects Stock Price Stability","text":"<p>Begin by analysing how different levels of volatility impact the stability of stock prices and the potential for investment gains or losses. Questions to Consider:</p> <ul> <li> <p>How do changes in volatility affect the frequency and magnitude of price swings?</p> </li> <li> <p>What implications does increased volatility have on the risk and potential returns of stock investments?</p> </li> </ul>"},{"location":"stock_market/#simulate-a-major-market-event-and-analyse-its-impact","title":"Simulate a Major Market Event and Analyse Its Impact","text":"<p>Set up scenarios where a significant market event affects stock prices on a specific day. Adjust the impact of these events to observe varying outcomes. Questions to Consider:</p> <ul> <li> <p>How does the market respond to positive versus negative events?</p> </li> <li> <p>Analyse the recovery or further decline in stock prices following the event. What does this tell you about market sentiment and investor behavior?</p> </li> </ul>"},{"location":"stock_market/#optional-develop-and-test-trading-strategies","title":"(Optional) Develop and Test Trading Strategies","text":"<p>Explore basic trading strategies such as \"buy and hold\", \"moving average crossover\", or \"momentum-based\" strategies. Implement these strategies in your simulation to test their effectiveness over time. Questions to Consider:</p> <ul> <li> <p>Which strategy performs best under stable versus volatile market conditions?</p> </li> <li> <p>How do these strategies perform in response to the simulated market events?</p> </li> </ul> <p>## Model Formulation</p> <p>The formula used in the <code>StockMarketSimulation</code> class simulates stock price movements by incorporating volatility, a directional trend (drift), and the impact of specific market events. Here\u2019s a detailed explanation of the components of the formula:</p> <ol> <li> <p>Volatility and Drift: Similar to the Resource Fluctuations Simulation, the stock price changes are driven by daily volatility and drift. Each day, the stock price undergoes a random change determined by a normal distribution centered around the <code>drift</code> (which can be positive or negative to represent an overall upward or downward trend) and spread according to the <code>volatility</code> (which accounts for the unpredictability or risk associated with the stock). This is mathematically modeled as:    [    \\text{Random Change} = \\text{Normal}(\\text{Drift}, \\text{Volatility})    ]    The new price for each day is then calculated as:    [    \\text{New Price} = \\text{Previous Price} \\times (1 + \\text{Random Change})    ]</p> </li> <li> <p>Market Event Impact: If there is a significant market event planned for a specific day (<code>event_day</code>), the stock price is adjusted to reflect the impact of this event using the <code>event_impact</code>, which is applied as a multiplicative factor. This adjusts the price in response to the event:    [    \\text{New Price} = \\text{Previous Price} \\times (1 + \\text{Event Impact})    ]</p> </li> </ol>"},{"location":"stock_market/#relation-to-classical-models","title":"Relation to Classical Models","text":"<p>The simulation model described in the <code>StockMarketSimulation</code> class aligns closely with the principles of the Geometric Brownian Motion (GBM) model used in financial mathematics to model the prices of financial instruments like stocks and commodities:</p> <ul> <li> <p>Geometric Brownian Motion: The use of a random change modeled with a normal distribution where the stock price is updated by multiplying the previous price by (1 + \\text{Random Change}) is characteristic of GBM. In GBM, prices are assumed to follow a log-normal distribution, ensuring that they remain positive and reflect realistic financial scenarios where prices are multiplicative.</p> </li> <li> <p>Event Modeling: The handling of specific market events by applying a multiplicative impact on the stock price for a particular day resembles a jump-diffusion model. This type of model is often used to incorporate sudden, significant changes in price due to external factors (such as corporate news, geopolitical events, etc.), which aren\u2019t captured by the standard GBM.</p> </li> </ul> <p>Overall, the simulation combines elements from established financial models to allow for dynamic and realistic modeling of stock prices, accommodating both the continuous aspect of daily price changes and discrete events that can significantly affect market conditions. This approach is quite common in financial market simulations used for educational purposes, trading strategy development, and risk management.</p>"}]}